title: Uml domain specific language
media: []
redirectFrom: []
summary:
  doc:
    type: doc
    content:
      - type: paragraph
        content:
          - type: text
            text: Lutamlâ€™ uml domain specific language syntax
contents:
  doc:
    type: doc
    content:
      - type: paragraph
        content:
          - type: text
            text: ' Lutaml supports special abstract language for describing uml entities and relations. The syntax is quite simple and originated from plantuml/dot languages.'
      - type: paragraph
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: '`diagram` syntax'
          - type: paragraph
            content:
              - type: text
                text: >-
                  `diagram` is a root element for each diagram. The equivalent
                  in plantuml will be @startuml..@enduml tags, or graph
                  graphname {} in dot language. Example:
          - type: paragraph
            content:
              - type: text
                text: '   '
          - type: code_block
            content:
              - type: text
                text: |
                  diagram MyView {
                    import Relationship, Element
                    title "My diagram"
                    fontname "Helvetica"
                  }
          - type: paragraph
            content:
              - type: text
                text: 'Where:'
          - type: bullet_list
            content:
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `import` - directive for including other .lutaml files
                          into the current document.
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `fontname` - render option, use described font for
                          diagram render
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: '`title` - name of the diagram.'
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: DataTypes
          - type: paragraph
            content:
              - type: text
                text: >-
                  Lutaml supports 3 types of data_types: `data_type`,
                  `primitive` and `enum`. Example of data types declaration:
          - type: code_block
            content:
              - type: text
                text: |+

                  diagram MyView {
                    enum MyEnum {}

                    enum AddressClassProfile {
                      +addressClassProfile: CharacterString
                    }

                    data_type "Banking Information" {
                      "art code"
                    }

                    primitive Integer
                  }

      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Associations
          - type: paragraph
            content:
              - type: text
                text: >-
                  Lutaml supports different types of associations:
                  `composition`, `aggregation`, `generalization`, `inheritance`,
                  `direct`. Lutaml uses association blocks in order to declare
                  associations. Syntax:
          - type: code_block
          - type: code_block
            content:
              - type: text
                text: 'association name {'
          - type: code_block
            content:
              - type: text
                text: ' owned_type association|composition|aggregation|generalization|uses'
          - type: code_block
            content:
              - type: text
                text: ' member_type association|composition|aggregation|generalization|uses'
          - type: code_block
            content:
              - type: text
                text: ' owned association_name[#attribute_name] [{property_string}][cardinality]'
          - type: code_block
            content:
              - type: text
                text: ' member association_name[#attribute_name] [{property_string}][cardinality]'
          - type: code_block
            content:
              - type: text
                text: '}'
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: 'where:'
          - type: bullet_list
            content:
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: ' `owned_type` - optional, use to define bidirectional association(association|composition|aggregation|generalization|uses)'
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `member_type` - association
                          type(association|composition|aggregation|generalization|uses)
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `owned|member` - end of association, use
                          `\#attribute_name` to set a role name
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `property_string` - property string for attibutes
                          associations
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: '`cardinality` - examples: ''1..*'', ''*'''
          - type: paragraph
          - type: code_block
            content:
              - type: text
                text: |-
                  class A {
                    addressClassProfile
                  }
          - type: code_block
            content:
              - type: text
                text: |-
                  class B {
                    attributeProfile
                  }
          - type: code_block
            content:
              - type: text
                text: |-
                  # Simple inheritance
                  association name {  
                    owned A
                    member B
                  }

                  # Aggregation
                  association BidirectionalAsscoiation {
                  owner_type aggregation
                    member_type direct
                    owner A#addressClassProfile
                    member B#attributeProfile [0..*]
                  }

                  # Uses
                  association AssociatingTypeAndAssociation {
                    type uses
                    from Association#+association {subsets relationship}[*]
                    to Type#+/endType {readOnly, subsets relatedElement} [1..*]
                  }
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Attributes/entries
          - type: paragraph
            content:
              - type: text
                text: 'Full syntax:'
          - type: paragraph
            content:
              - type: text
                marks:
                  - type: code
                text: >-
                  [visibility][/][attribute] name [:type][multiplicity][=initial
                  value][{attribute body}]     
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: 'where:'
          - type: bullet_list
            content:
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `visibility` can be equal to `-` - private, `+` -
                          public, `#` - protected, `~` - friendly
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: '`attribute` - attrbute keyword'
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: '`/` - symbolizes a derived attribute.'
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `multiplicity` - Multiplicity is in square brackets
                          (e.g. [1..*]).
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `initial value` - Default value specifies the initial
                          value of the attribute.
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `{attribute body}` - Body of attribute, additional
                          properties for attribute
                  - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: >-
                  One can use explicit or implicit syntax for attribute
                  definition
          - type: paragraph
            content:
              - type: text
                text: 'explicit syntax:  '
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                marks:
                  - type: code
                text: |-
                  class A {
                    attribute my_attribute
                  }

                  enum A {
                    entry my_val2
                  }
              - type: text
                text: |+




                  implicit syntax:

              - type: text
                marks:
                  - type: code
                text: |-
                  class A {
                    my_attribute
                  }

                  enum A {
                    my_val2
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: >-
                  Attribute visibility. Syntax for defining visibility:
                  [+|-|#|~] [attribute] attribute_name. LutaML uses these
                  modificators to define attribute(entry) visbility:
          - type: paragraph
            content:
              - type: text
                text: + => public
          - type: paragraph
            content:
              - type: text
                text: '- => private'
          - type: paragraph
            content:
              - type: text
                text: '# => protected'
          - type: paragraph
            content:
              - type: text
                text: ~ => package
          - type: paragraph
            content:
              - type: text
                text: 'example:'
          - type: paragraph
          - type: code_block
            content:
              - type: text
                text: 'class Figure {'
          - type: code_block
            content:
              - type: text
                text: ' // Public attribute `radius`'
          - type: code_block
            content:
              - type: text
                text: ' + radius'
          - type: code_block
            content:
              - type: text
                text: ' // private attribute `filled`'
          - type: code_block
            content:
              - type: text
                text: ' - filled'
          - type: code_block
            content:
              - type: text
                text: ' // protected attribute `length`'
          - type: code_block
            content:
              - type: text
                text: ' # length'
          - type: code_block
            content:
              - type: text
                text: |+
                  }

      - type: code_block
      - type: paragraph
      - type: code_block
        content:
          - type: text
            text: |+

      - type: paragraph
      - type: paragraph
      - type: paragraph
      - type: code_block
        content:
          - type: text
            text: |+



