title: Uml domain specific language
media: []
redirectFrom: []
summary:
  doc:
    type: doc
    content:
      - type: paragraph
        content:
          - type: text
            text: Lutamlâ€™ uml domain specific language syntax
contents:
  doc:
    type: doc
    content:
      - type: paragraph
        content:
          - type: text
            text: ' Lutaml supports special abstract language for describing uml entities and relations. The syntax is quite simple and originated from plantuml/dot languages.'
      - type: paragraph
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: '`diagram` syntax'
          - type: paragraph
            content:
              - type: text
                text: >-
                  `diagram` is a root element for each diagram. The equivalent
                  in plantuml will be @startuml..@enduml tags, or graph
                  graphname {} in dot language. Example:
          - type: paragraph
            content:
              - type: text
                text: '   '
          - type: code_block
            content:
              - type: text
                text: |
                  diagram MyView {
                    import Relationship, Element
                    title "My diagram"
                    fontname "Helvetica"
                  }
          - type: paragraph
            content:
              - type: text
                text: 'Where:'
          - type: bullet_list
            content:
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `import` - directive for including other .lutaml files
                          into the current document.
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `fontname` - render option, use described font for
                          diagram render
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: '`title` - name of the diagram.'
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: DataTypes
          - type: paragraph
            content:
              - type: text
                text: >-
                  Lutaml supports 3 types of data_types: `data_type`,
                  `primitive` and `enum`. Example of data types declaration:
          - type: code_block
            content:
              - type: text
                text: |+

                  diagram MyView {
                    enum MyEnum {}

                    enum AddressClassProfile {
                      +addressClassProfile: CharacterString
                    }

                    data_type "Banking Information" {
                      "art code"
                    }

                    primitive Integer
                  }

      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Associations
          - type: paragraph
            content:
              - type: text
                text: >-
                  Lutaml supports different types of associations:
                  `composition`, `aggregation`, `generalization`, `inheritance`,
                  `direct`. Lutaml uses association blocks in order to declare
                  associations. Syntax:
          - type: code_block
          - type: code_block
            content:
              - type: text
                text: 'association name {'
          - type: code_block
            content:
              - type: text
                text: ' owned_type association|composition|aggregation|generalization|uses'
          - type: code_block
            content:
              - type: text
                text: ' member_type association|composition|aggregation|generalization|uses'
          - type: code_block
            content:
              - type: text
                text: ' owned association_name[#attribute_name] [{property_string}][cardinality]'
          - type: code_block
            content:
              - type: text
                text: ' member association_name[#attribute_name] [{property_string}][cardinality]'
          - type: code_block
            content:
              - type: text
                text: '}'
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: 'where:'
          - type: bullet_list
            content:
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: ' `owned_type` - optional, use to define bidirectional association(association|composition|aggregation|generalization|uses)'
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `member_type` - association
                          type(association|composition|aggregation|generalization|uses)
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `owned|member` - end of association, use
                          `\#attribute_name` to set a role name
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: >-
                          `property_string` - property string for attibutes
                          associations
              - type: list_item
                content:
                  - type: paragraph
                    content:
                      - type: text
                        text: '`cardinality` - examples: ''1..*'', ''*'''
          - type: paragraph
          - type: code_block
            content:
              - type: text
                text: |+
                  # Simple inheritance
                  association name {  
                    owned association_name[#attribute_name] [{property_string}][cardinality]
                    member association_name[#attribute_name] [{property_string}][cardinality]
                  }

                  # Aggregation
                  association BidirectionalAsscoiation {
                  owner_type aggregation
                    member_type direct
                    owner AddressClassProfile#addressClassProfile
                    member AttributeProfile#attributeProfile [0..*]
                  }

      - type: code_block
      - type: code_block
