title: 'Simple tutorial '
media:
  - tutorial_diagram_1.png
redirectFrom: []
contents:
  doc:
    type: doc
    content:
      - type: paragraph
        content:
          - type: text
            text: >-
              In this article we will try to create a simple lutaml uml file
              from the following diagram:
      - type: figure
        content:
          - type: image
            attrs:
              alt: Example diagram
              src: tutorial_diagram_1.png
          - type: figure_caption
            content:
              - type: text
                text: Example diagram
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Plantuml version
          - type: paragraph
            content:
              - type: text
                text: >-
                  This simple diagram can be represented as the following
                  plantuml file:
          - type: code_block
            content:
              - type: text
                text: >-
                  @startuml

                  '******* CLASS GROUPS
                  *************************************************


                  class Customer {
                    +name: String[0..*]
                    -phone: String
                  }


                  class Order {
                    +deliveryLocation: Location
                    +number: Integer[0..1]
                  }


                  class Location {
                    +city
                    +address
                  }


                  class NormalOrder {
                    +deliveryLocation: Location
                    +number: Integer[0..1]
                  }


                  class FastDeliveryOrder {
                    +deliveryLocation: Location
                    +number: Integer[0..1]
                  }


                  '******* CLASS RELATIONS
                  **********************************************

                  Order o-- Location

                  NormalOrder --|> Order

                  FastDeliveryOrder --|> Order

                  Order --> Customer

                  @enduml
          - type: paragraph
            content:
              - type: text
                text: '   '
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Diagram root tag
          - type: paragraph
            content:
              - type: text
                text: 'In plantuml we start our diagram definition with '
              - type: text
                marks:
                  - type: em
                text: '@startuml'
              - type: text
                text: ' keyword and end with '
              - type: text
                marks:
                  - type: em
                text: '@enduml'
              - type: text
                text: ', in lutaml uml this role is given to the '
              - type: text
                marks:
                  - type: em
                text: diagram
              - type: text
                text: ' tag:'
          - type: code_block
            content:
              - type: text
                text: |-
                  diagram MyView {
                    title "My diagram"
                  }
          - type: paragraph
            content:
              - type: text
                text: 'You can supply additional attributes for diagram in '
              - type: text
                marks:
                  - type: em
                text: diagram
              - type: text
                text: ' root tag, we can set custom diagram name with '
              - type: text
                marks:
                  - type: em
                text: title
              - type: text
                text: ' attribute or set custom font with '
              - type: text
                marks:
                  - type: em
                text: fontname
              - type: text
                text: ' attribute.'
      - type: paragraph
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Classes representation
          - type: paragraph
            content:
              - type: text
                text: 'Class objects can be described with '
              - type: text
                marks:
                  - type: em
                text: class
              - type: text
                text: ' keyword, visibility of attributes can be controlled with symbols '
              - type: text
                marks:
                  - type: em
                text: +
              - type: text
                text: ', '
              - type: text
                marks:
                  - type: em
                text: '-'
              - type: text
                text: ', '
              - type: text
                marks:
                  - type: em
                text: '#'
              - type: text
                text: >-
                  , if no visibility modifier provided lutaml will treat
                  attribute entity as public attribute:
          - type: code_block
            content:
              - type: text
                text: |-
                  class Customer {
                    +name: String[0..*] // Similar visibility: `name: String`
                    -phone: String
                  }
          - type: paragraph
            content:
              - type: text
                marks:
                  - type: em
                text: //
              - type: text
                text: ' is a comment tag for lutaml uml, code after this tag on this line will be ignored by parser.  The code above is pretty similar to the plantuml version. Lutaml uml also supports class and attribute annotations which can be described with '
              - type: text
                marks:
                  - type: em
                text: definition
              - type: text
                text: ' keyword. Lutaml uml parser will parse these tags and link them to the related entities(class/enum or attribute/value). Here is the example:'
          - type: paragraph
          - type: code_block
            content:
              - type: text
                text: |-
                  class Customer {
                    definition { Class describing customer entity and its metadata }
                    +name: String[0..*] {
                      definition {
                        first name of the client, in lower case
                      }
                    }
                    -phone: String
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: 'The whole classes representation will look like this:'
          - type: code_block
            content:
              - type: text
                text: |-
                  diagram MyView {
                    title "my diagram"

                    class Customer {
                      name: String[0..*]
                      -phone: String
                    }

                    class Order {
                      deliveryLocation: Location
                      number: Integer[0..1]
                    }

                    class Location {
                      city
                      address
                    }

                    class NormalOrder {
                      deliveryLocation: Location
                      number: Integer[0..1]
                    }

                    class FastDeliveryOrder {
                      deliveryLocation: Location
                      number: Integer[0..1]
                    }
                  }
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Associations representation
          - type: paragraph
            content:
              - type: text
                text: 'Unlike plantuml, lutaml uml uses here special keyword '
              - type: text
                marks:
                  - type: em
                text: association
              - type: text
                text: ' to define associaton. Here is an example:'
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    owner_type aggregation
                    member_type direct
                    owner A
                    member B
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                marks:
                  - type: em
                text: owner
              - type: text
                text: ' and '
              - type: text
                marks:
                  - type: em
                text: member
              - type: text
                text: '  keywords describes direction of association, in order to describe plantuml association A â€”> B we need to write the following lutaml uml code:'
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    owner A
                    member B
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                marks:
                  - type: em
                text: owner_type
              - type: text
                text: ' and '
              - type: text
                marks:
                  - type: em
                text: member_type
              - type: text
                text: ' describes the type of association to display, if we dont supply any type lutaml uml will use the default arrow style - inheritance. In case of our example diagram the relation between '
              - type: text
                marks:
                  - type: em
                text: Order
              - type: text
                text: ' and '
              - type: text
                marks:
                  - type: em
                text: NormalOrder
              - type: text
                text: /
              - type: text
                marks:
                  - type: em
                text: FastDeliveryOrder
              - type: text
                text: ' can be described with the following code:'
          - type: code_block
            content:
              - type: text
                text: |
                  association {
                    owner NormalOrder
                    member Order
                  }
                  association {
                    owner FastDeliveryOrder
                    member Order
                  }
          - type: paragraph
            content:
              - type: text
                text: 'In order to described the inheritance between '
              - type: text
                marks:
                  - type: em
                text: Order
              - type: text
                text: ' and '
              - type: text
                marks:
                  - type: em
                text: NormalOrder
              - type: text
                text: /
              - type: text
                marks:
                  - type: em
                text: FastDeliveryOrder
              - type: text
                text: ' we need to use '
              - type: text
                marks:
                  - type: em
                text: member_type
              - type: text
                text: ' attribute:'
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    member_type 'direct'
                    owner Order
                    member Customer
                  }
          - type: paragraph
            content:
              - type: text
                text: 'In order to represent aggregation relation between '
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    member_type aggregation
                    owner Location
                    member Order
                  }
          - type: paragraph
            content:
              - type: text
                text: 'The whole associations block will look like this:'
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    owner NormalOrder
                    member Order
                  }

                  association {
                    owner FastDeliveryOrder
                    member Order
                  }

                  association {
                    member_type 'direct'
                    owner Order
                    member Customer
                  }

                  association {
                    member_type aggregation
                    owner Location
                    member Order
                  }
          - type: paragraph
