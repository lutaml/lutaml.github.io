title: 'Simple tutorial '
media:
  - tutorial_diagram_1.png
redirectFrom: []
contents:
  doc:
    type: doc
    content:
      - type: paragraph
        content:
          - type: text
            text: >-
              In this article we will try to create a simple lutaml uml file
              from the following diagram:
      - type: figure
        content:
          - type: image
            attrs:
              alt: Example diagram
              src: tutorial_diagram_1.png
          - type: figure_caption
            content:
              - type: text
                text: Example diagram
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Plantuml version
          - type: paragraph
            content:
              - type: text
                text: >-
                  This simple diagram can be represented as the following
                  plantuml file:
          - type: code_block
            content:
              - type: text
                text: >-
                  @startuml

                  '******* CLASS GROUPS
                  *************************************************


                  class Customer {
                    +name: String[0..*]
                    -phone: String
                  }


                  class Order {
                    +deliveryLocation: Location
                    +number: Integer[0..1]
                  }


                  class Location {
                    +city
                    +address
                  }


                  class NormalOrder {
                    +deliveryLocation: Location
                    +number: Integer[0..1]
                  }


                  class FastDeliveryOrder {
                    +deliveryLocation: Location
                    +number: Integer[0..1]
                  }


                  '******* CLASS RELATIONS
                  **********************************************

                  Order o-- Location

                  NormalOrder --|> Order

                  FastDeliveryOrder --|> Order

                  Order --> Customer

                  @enduml
          - type: paragraph
            content:
              - type: text
                text: '   '
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Diagram root tag
          - type: paragraph
            content:
              - type: text
                text: >-
                  In plantuml we start our diagram definition with `@startuml`
                  keyword and end with `@enduml`, in lutaml uml this role is
                  given to `diagram` tag:
          - type: code_block
            content:
              - type: text
                text: |-
                  diagram MyView {
                    title "My diagram"
                  }
          - type: paragraph
            content:
              - type: text
                text: >-
                  You can supply additional attributes for diagram in `diagram`
                  root tag, we can set custom diagram name with `title`
                  attribute or set custom font with `fontname` attribute.
      - type: paragraph
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Classes representation
          - type: paragraph
            content:
              - type: text
                text: >-
                  Class objects can be described with `class` keyword,
                  visibility of attributes can be controlled with symbols `+`,
                  `-`, `#`, if no visibility modifier provided lutaml will treat
                  attribute entity as public attribute:
          - type: code_block
            content:
              - type: text
                text: |-
                  class Customer {
                    +name: String[0..*] // Similar visibility: `name: String`
                    -phone: String
                  }
          - type: paragraph
            content:
              - type: text
                text: >-
                  `//` is a comment tag for lutaml uml, code after this tag on
                  this line will be ignored by parser.  The code above is pretty
                  similar to the plantuml version. Lutaml uml also supports
                  class and attribute annotations which can be described with
                  `definition` keyword. Lutaml uml parser will parse these tags
                  and link them to the related entities(class/enum or
                  attribute/value). Here is the example:
          - type: paragraph
          - type: code_block
            content:
              - type: text
                text: |-
                  class Customer {
                    definition { Class describing customer entity and its metadata }
                    +name: String[0..*] {
                      definition {
                        first name of the client, in lower case
                      }
                    }
                    -phone: String
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: 'The whole classes representation will look like this:'
          - type: code_block
            content:
              - type: text
                text: |-
                  diagram MyView {
                    title "my diagram"

                    class Customer {
                      name: String[0..*]
                      -phone: String
                    }

                    class Order {
                      deliveryLocation: Location
                      number: Integer[0..1]
                    }

                    class Location {
                      city
                      address
                    }

                    class NormalOrder {
                      deliveryLocation: Location
                      number: Integer[0..1]
                    }

                    class FastDeliveryOrder {
                      deliveryLocation: Location
                      number: Integer[0..1]
                    }
                  }
      - type: section
        attrs:
          id: untitled-section
        content:
          - type: section_header
            content:
              - type: text
                text: Associations representation
          - type: paragraph
            content:
              - type: text
                text: >-
                  Unlike plantuml, lutaml uml uses here special keyword
                  `association` to define associaton. Here is an example:
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    owner_type aggregation
                    member_type direct
                    owner A
                    member B
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: >-
                  `owner` and `member`  keywords describes direction of
                  association, in order to describe plantuml association A â€”> B
                  we need to write the following lutaml uml code:
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    owner A
                    member B
                  }
          - type: paragraph
          - type: paragraph
            content:
              - type: text
                text: >-
                  `owner_type` and `member_type` describes the type of
                  association to display, if we dont supply any type lutaml uml
                  will use the default arrow style. In case of our example
                  diagram the relation between `Customer` and `Order` can be
                  described as the following code:
          - type: code_block
            content:
              - type: text
                text: |-
                  association {
                    owner Order
                    member Customer
                  }
          - type: paragraph
            content:
              - type: text
                text: second
          - type: paragraph
